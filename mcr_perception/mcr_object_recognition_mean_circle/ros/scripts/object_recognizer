#!/usr/bin/env python

PACKAGE = 'mcr_object_recognition_mean_circle'
NODE = 'object_recognizer'
SERVICE = '~recognize_object'

import roslib
import rospy

import sys
from os.path import join
import numpy as np

# Import helper class for loading trained network
from mcr_object_recognition_mean_circle.svm_classifier import SVMObjectClassifier
from mcr_object_recognition_mean_circle.features import calculate_feature_vector

from mcr_perception_msgs.srv import RecognizeObject
from mcr_perception_msgs.srv import RecognizeObjectResponse

import sensor_msgs.point_cloud2
import struct
import colorsys

# copied from python-pcl
def float_to_rgb(p_rgb):
    # rgb = *reinterpret_cast<int*>(&p.rgb)
    rgb_bytes = struct.pack('f', p_rgb)
    rgb = struct.unpack('I', rgb_bytes)[0]
    r = (rgb >> 16) & 0x0000ff
    g = (rgb >> 8)  & 0x0000ff
    b = (rgb)       & 0x0000ff
    return (r/255.0),(g/255.0),(b/255.0)

def load_classifier(classifier_name):
    cfg_folder = join(roslib.packages.get_pkg_dir(PACKAGE), 'common', 'config')
    return SVMObjectClassifier.load(join(cfg_folder, classifier_name, 'classifier.pkl'),
                                    join(cfg_folder, classifier_name, 'label_encoder.pkl'))

def convert_to_xyzhsv(pc):
    # Generator for x,y,z,rgb fields from pointcloud
    xyzrgb_gen = sensor_msgs.point_cloud2.read_points(pc, skip_nans=False, field_names=("x", "y", "z", "rgb"))

    # convert generator to list of lists then numpy array
    xyzrgb = [list(elem) for elem in list(xyzrgb_gen)]
    xyzrgb = np.array(xyzrgb)
    rgb = xyzrgb[:,3][np.newaxis].T
    hsv = np.array([list(colorsys.rgb_to_hsv(*float_to_rgb(i))) for i in rgb])
    xyzhsv = np.hstack([xyzrgb[:,0:3], hsv])

    return xyzhsv

if __name__ == '__main__':
    rospy.init_node(NODE)
    classifier = load_classifier(rospy.get_param("~classifier"))

    def recognize_object_cb(request):
        rospy.loginfo('Received [%s] request.' % SERVICE)
        cloud = request.cloud
        xyzhsv = convert_to_xyzhsv(cloud)
        mean_colour = np.median(xyzhsv, axis=0)
        features = calculate_feature_vector(xyzhsv, True)
        label, probability = classifier.classify(features)
        if 'Container' in label or 'CONTAINER' in label:
            # this is [x, y, z, h, s ,v]
            print mean_colour
            # Hue value is typically approx 0.9-0.1 for Red and 0.55 for Blue
            # NOTE: hue value is circular, so 0.99 is very close to 0.01
            if mean_colour[3] > 0.4 and  mean_colour[3] < 0.7:
                label = 'CONTAINER_BOX_BLUE'
            else:
                label = 'CONTAINER_BOX_RED'
        resp = RecognizeObjectResponse()
        resp.name = label
        resp.probability = probability
        return resp

    s = rospy.Service(SERVICE, RecognizeObject, recognize_object_cb)
    rospy.loginfo('Started [%s] service.' % SERVICE)
    rospy.spin()
